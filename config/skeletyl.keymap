/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        left_braket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <0 1>;
            timeout-ms = <20>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
            timeout-ms = <20>;
        };

        left_parenthsis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
            timeout-ms = <20>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            timeout-ms = <20>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            timeout-ms = <20>;
        };

        right_parthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <20>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            timeout-ms = <20>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <17 18>;
            timeout-ms = <20>;
        };

        apostrophe {
            bindings = <&kp SQT>;
            key-positions = <28 29>;
            timeout-ms = <20>;
        };

        double_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <18 19>;
            timeout-ms = <20>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <26 27>;
            timeout-ms = <20>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <27 28>;
            timeout-ms = <20>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <22 23>;
            timeout-ms = <20>;
        };

        backsplash {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <21 22>;
            timeout-ms = <20>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <20 21>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <600>;
            global-quick-tap;
            quick-tap-ms = <400>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                        &kp W                                &kp E                  &kp R           &kp T    &kp Y                            &kp U  &kp I      &kp O       &kp P
&lt 1 A                      &hm LEFT_CONTROL S                   &hm LEFT_WIN D         &hm LEFT_ALT F  &kp G    &kp H                            &kp J  &kp K      &kp L       &kp SEMICOLON
&kp Z                        &kp X                                &kp C                  &kp V           &lt 4 B  &kp N                            &kp M  &kp COMMA  &kp PERIOD  &kp FSLH
         &mt LEFT_SHIFT TAB                      &lt 2 BACKSPACE                  &none                  &none    &mt CAPSLOCK SPACE  &lt 3 ENTER
            >;
        };

        a_fastkeylayer {
            bindings = <
&none         &kp BACKSPACE         &kp DEL           &kp F1     &none      &none         &kp LS(LA(EQUAL))  &kp LS(LA(MINUS))  &none  &none
&none         &kp LC(A)             &kp LC(Y)         &kp LC(Z)  &kp LC(S)  &none         &none              &none              &none  &none
&none         &kp LC(X)             &kp LC(C)         &kp LC(V)  &none      &none         &none              &none              &none  &none
       &none                 &none             &none             &none      &none  &none
            >;
        };

        numrow_layer {
            bindings = <
&kp LS(NUMBER_1)          &kp LS(NUMBER_2)          &kp LS(NUMBER_3)          &kp LS(NUMBER_4)  &kp LS(N5)  &kp LS(NUMBER_6)          &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
&kp N1                    &kp N2                    &kp N3                    &kp N4            &kp N5      &kp N6                    &kp N7      &kp N8      &kp N9      &kp N0
&none                     &none                     &none                     &none             &none       &none                     &trans      &trans      &trans      &trans
                  &trans                    &trans                    &trans                    &trans      &trans            &trans
            >;
        };

        numpad_layer {
            bindings = <
&kp N7          &kp N8                 &kp N9          &kp COMMA  &trans  &trans          &none   &none   &trans  &trans
&kp N4          &kp N5                 &kp N6          &kp DOT    &trans  &trans          &trans  &trans  &trans  &trans
&kp N1          &kp N2                 &kp N3          &kp N0     &trans  &trans          &trans  &trans  &trans  &trans
        &trans          &kp BACKSPACE          &trans             &trans  &trans  &trans
            >;
        };

        bluetooth_layer {
            bindings = <
&bt BT_SEL 0          &bt BT_SEL 1            &bt BT_SEL 2          &bt BT_SEL 3  &bt BT_SEL 4  &trans          &trans  &trans  &trans  &trans
&bt BT_CLR            &bt BT_CLR_ALL          &trans                &trans        &trans        &trans          &trans  &trans  &trans  &trans
&trans                &trans                  &trans                &trans        &trans        &trans          &trans  &trans  &trans  &trans
              &trans                  &trans                &trans                &trans        &trans  &trans
            >;
        };
    };
};
